-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/GammaCorrectionHDLExample/Pixel_Str_ip_addr_decoder.vhd
-- Created: 2017-11-05 13:15:24
-- 
-- Generated by MATLAB 9.2 and HDL Coder 3.10
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Pixel_Str_ip_addr_decoder
-- Source Path: Pixel_Str_ip/Pixel_Str_ip_axi_lite/Pixel_Str_ip_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Pixel_Str_ip_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_axi4_stream_video_slave_image_width :   OUT   std_logic_vector(12 DOWNTO 0);  -- ufix13
        write_axi4_stream_video_slave_image_height :   OUT   std_logic_vector(12 DOWNTO 0);  -- ufix13
        write_axi4_stream_video_slave_hporch :   OUT   std_logic_vector(12 DOWNTO 0);  -- ufix13
        write_axi4_stream_video_slave_vporch :   OUT   std_logic_vector(12 DOWNTO 0)  -- ufix13
        );
END Pixel_Str_ip_addr_decoder;


ARCHITECTURE rtl OF Pixel_Str_ip_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_axi_enable            : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL write_reg_axi_enable             : std_logic;  -- ufix1
  SIGNAL decode_sel_axi4_stream_video_slave_image_width : std_logic;  -- ufix1
  SIGNAL reg_enb_axi4_stream_video_slave_image_width : std_logic;  -- ufix1
  SIGNAL data_in_axi4_stream_video_slave_image_width : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL write_reg_axi4_stream_video_slave_image_width : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL decode_sel_axi4_stream_video_slave_image_height : std_logic;  -- ufix1
  SIGNAL reg_enb_axi4_stream_video_slave_image_height : std_logic;  -- ufix1
  SIGNAL data_in_axi4_stream_video_slave_image_height : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL write_reg_axi4_stream_video_slave_image_height : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL decode_sel_axi4_stream_video_slave_hporch : std_logic;  -- ufix1
  SIGNAL reg_enb_axi4_stream_video_slave_hporch : std_logic;  -- ufix1
  SIGNAL data_in_axi4_stream_video_slave_hporch : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL write_reg_axi4_stream_video_slave_hporch : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL decode_sel_axi4_stream_video_slave_vporch : std_logic;  -- ufix1
  SIGNAL reg_enb_axi4_stream_video_slave_vporch : std_logic;  -- ufix1
  SIGNAL data_in_axi4_stream_video_slave_vporch : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL write_reg_axi4_stream_video_slave_vporch : unsigned(12 DOWNTO 0);  -- ufix13

BEGIN
  const_0 <= to_unsigned(0, 32);

  data_read <= std_logic_vector(const_0);

  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_axi_enable <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  reg_enb_axi_enable <= decode_sel_axi_enable AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  const_1_1 <= '1';

  enb <= const_1_1;

  reg_axi_enable_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_axi_enable <= '1';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_axi_enable = '1' THEN
        write_reg_axi_enable <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_process;


  write_axi_enable <= write_reg_axi_enable;

  
  decode_sel_axi4_stream_video_slave_image_width <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  reg_enb_axi4_stream_video_slave_image_width <= decode_sel_axi4_stream_video_slave_image_width AND wr_enb;

  data_in_axi4_stream_video_slave_image_width <= data_write_unsigned(12 DOWNTO 0);

  reg_axi4_stream_video_slave_image_width_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_axi4_stream_video_slave_image_width <= to_unsigned(16#0780#, 13);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_axi4_stream_video_slave_image_width = '1' THEN
        write_reg_axi4_stream_video_slave_image_width <= data_in_axi4_stream_video_slave_image_width;
      END IF;
    END IF;
  END PROCESS reg_axi4_stream_video_slave_image_width_process;


  write_axi4_stream_video_slave_image_width <= std_logic_vector(write_reg_axi4_stream_video_slave_image_width);

  
  decode_sel_axi4_stream_video_slave_image_height <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0003#, 14) ELSE
      '0';

  reg_enb_axi4_stream_video_slave_image_height <= decode_sel_axi4_stream_video_slave_image_height AND wr_enb;

  data_in_axi4_stream_video_slave_image_height <= data_write_unsigned(12 DOWNTO 0);

  reg_axi4_stream_video_slave_image_height_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_axi4_stream_video_slave_image_height <= to_unsigned(16#0438#, 13);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_axi4_stream_video_slave_image_height = '1' THEN
        write_reg_axi4_stream_video_slave_image_height <= data_in_axi4_stream_video_slave_image_height;
      END IF;
    END IF;
  END PROCESS reg_axi4_stream_video_slave_image_height_process;


  write_axi4_stream_video_slave_image_height <= std_logic_vector(write_reg_axi4_stream_video_slave_image_height);

  
  decode_sel_axi4_stream_video_slave_hporch <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0004#, 14) ELSE
      '0';

  reg_enb_axi4_stream_video_slave_hporch <= decode_sel_axi4_stream_video_slave_hporch AND wr_enb;

  data_in_axi4_stream_video_slave_hporch <= data_write_unsigned(12 DOWNTO 0);

  reg_axi4_stream_video_slave_hporch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_axi4_stream_video_slave_hporch <= to_unsigned(16#0118#, 13);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_axi4_stream_video_slave_hporch = '1' THEN
        write_reg_axi4_stream_video_slave_hporch <= data_in_axi4_stream_video_slave_hporch;
      END IF;
    END IF;
  END PROCESS reg_axi4_stream_video_slave_hporch_process;


  write_axi4_stream_video_slave_hporch <= std_logic_vector(write_reg_axi4_stream_video_slave_hporch);

  
  decode_sel_axi4_stream_video_slave_vporch <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0005#, 14) ELSE
      '0';

  reg_enb_axi4_stream_video_slave_vporch <= decode_sel_axi4_stream_video_slave_vporch AND wr_enb;

  data_in_axi4_stream_video_slave_vporch <= data_write_unsigned(12 DOWNTO 0);

  reg_axi4_stream_video_slave_vporch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_axi4_stream_video_slave_vporch <= to_unsigned(16#002D#, 13);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_axi4_stream_video_slave_vporch = '1' THEN
        write_reg_axi4_stream_video_slave_vporch <= data_in_axi4_stream_video_slave_vporch;
      END IF;
    END IF;
  END PROCESS reg_axi4_stream_video_slave_vporch_process;


  write_axi4_stream_video_slave_vporch <= std_logic_vector(write_reg_axi4_stream_video_slave_vporch);

END rtl;

